#  GTlab Intelligraph
#
#  SPDX-License-Identifier: BSD-3-Clause
#  SPDX-FileCopyrightText: 2024 German Aerospace Center

# Variables that are defined globally for the pipeline
variables:
  PIPELINEVERSION: "2.1.0"
  GIT_SUBMODULE_STRATEGY: "recursive"
  GIT_STRATEGY: "clone"
  
  # Regulare expression pattern
  # enclose the branch name with ^ and $
  # separete severl branch names with |
  # e.g. /^main$|^main_1_0$/
  STABLE_BRANCHES: /^main$/
  
  # Name of the unstable branch (if it exists)
  # UNSTABLE_BRANCH: unstable_master

include:
  - project: 'gtlab/public/development-tools/gitlab-templates'
    file: '/ci-templates/.ci-templates-cmake-1.0.yml'

stages:
  - update
  - build
  - test
  - regressionTest
  - unstableBuild
  - unstableTest
  - deploy
  - codequality
  - package
  - badges

windowsBuildDebug:
  stage: build
  extends: 
    - .build-win_20
  script:
    # sync submodules
    - git submodule sync
    - git submodule update --init
    # build
    - $env:PATH+=(";.\build;"+$env:GTLAB_DEV_TOOLS+"\binDebug;"+$env:GTLAB_DEV_TOOLS+"\binDebug\modules;")
    - cmake -B build -S . -G "Ninja" -DGTLAB_DEVTOOLS_DIR="$env:GTLAB_DEV_TOOLS"  -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-msvc2019-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

windowsBuildRelease:
  stage: build
  extends: 
    - .build-win_20
    - .run-master-and-tags
  script:
    # sync submodules
    - git submodule sync
    - git submodule update --init
    # build
    - cmake -B build -S . -G "Ninja" -DGTLAB_DEVTOOLS_DIR="$env:GTLAB_DEV_TOOLS"  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-msvc2019
    - cmake --build build --target install
    
# build on Linux system
linuxBuildDebug:
  stage: build
  extends: 
    - .build-linux_20
  script: 
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.dlr.de" > ~/.git-credentials
    # sync submodules
    - git submodule sync
    - git submodule update --init
    # build
    - export LD_LIBRARY_PATH="$GTLAB_DEV_TOOLS/bin:$LD_LIBRARY_PATH"
    - export LD_LIBRARY_PATH="$GTLAB_DEV_TOOLS/bin/modules:$LD_LIBRARY_PATH"
    - cmake -B build -S . -G "Ninja" -DGTLAB_DEVTOOLS_DIR=$GTLAB_DEV_TOOLS -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-linux-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

linuxBuildRelease:
  extends: 
  stage: build
  extends: 
    - .build-linux_20
    - .run-master-and-tags
  script: 
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.dlr.de" > ~/.git-credentials
    # sync submodules
    - git submodule sync
    - git submodule update --init
    # build
    - export LD_LIBRARY_PATH="$GTLAB_DEV_TOOLS/bin:$LD_LIBRARY_PATH"
    - export LD_LIBRARY_PATH="$GTLAB_DEV_TOOLS/bin/modules:$LD_LIBRARY_PATH"
    - cmake -B build -S . -G "Ninja" -DGTLAB_DEVTOOLS_DIR=$GTLAB_DEV_TOOLS -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-linux -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

testWin_2.0:
  stage: test
  tags: ["windows", "docker"]
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-win
  needs: ["windowsBuildDebug"]
  before_script:
    - '& $env:GTLAB_UPDATE_TOOL up --confirm-command; $null'
  script:
    - $env:path = "$env:GTLAB_DEV_TOOLS\binDebug;$env:GTLAB_DEV_TOOLS\binDebug\modules;$env:path"
    - cd build
    - .\IntelliGraphUnitTests.exe --gtest_output=xml:unittests.xml
  artifacts:
    paths:
      - "build/unittests.xml"
    expire_in: 1 week
    reports:
      junit: build/unittests.xml

testLinux_2.0:
  stage: test
  extends:
    - .linuxdocker
  needs: ["linuxBuildDebug"]
  before_script:
    # update to latest dev tools
    - '"$GTLAB_UPDATE_TOOL" up --confirm-command'
  script:
    - cd build
    - LD_LIBRARY_PATH="$GTLAB_DEV_TOOLS/binDebug" ./IntelliGraphUnitTests --gtest_output=xml:unittests.xml
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
  artifacts:
    paths:
      - "build/unittests.xml"
    expire_in: 1 week
    reports:
      junit: build/unittests.xml 

.package:
  stage: package
  tags: ["docker", "linux"]
  extends: [".run-master-and-tags"]
  image: debian:bullseye
  script:
    - cp -r install-$toolchain-dbg/* install-$toolchain
    - mv install-$toolchain gtlab-intelligraph-$toolchain
    - tar czf gtlab-intelligraph-$toolchain.tar.gz gtlab-intelligraph-$toolchain
  artifacts:
    name: "gtlab-intelligraph-$toolchain"
    paths: ["gtlab-intelligraph-$toolchain.tar.gz"]
  variables:
    toolchain: msvc2019
    GIT_STRATEGY: "none"

package-win-gtlab_2.0:
  extends: [".package"]
  needs: ["windowsBuildDebug", "windowsBuildRelease"]
  variables:
    toolchain: msvc2019

package-linux-gtlab_2.0:
  extends: [".package"]
  needs: ["linuxBuildDebug", "linuxBuildRelease"]
  variables:
    toolchain: linux

# code quality
 
#cppcheck:
#  stage: codequality
#  extends: .cppCheckReportTemplate
#  allow_failure: true

check-license:
   stage: codequality
   extends:
    - .linuxdocker
   needs: []
   before_script:
    - python3 -m pip install reuse
   script:
    - reuse lint
   variables:
     GIT_SUBMODULE_STRATEGY: "none"
   
cppcheck:
  stage: codequality
  extends: .cppCheckTemplate
  allow_failure: false
  variables:
    GIT_SUBMODULE_STRATEGY: "none"


pages:
  stage: badges
  extends: .pageTemplate

# badges
badges:
  stage: badges
  extends: 
    - .stable-only-master
    - .badgeTemplate
  dependencies:
    - windowsBuildDebug
    - linuxBuildDebug
    #- testWin
    #- testLinux
